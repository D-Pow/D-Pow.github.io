{"version":3,"sources":["assets/react_logo.svg","components/Home.js","components/About.js","components/Header/Navbar.js","components/Header/index.js","components/Header/Header.js","components/Footer/index.js","components/Footer/Footer.js","components/App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","Fragment","React","Component","About","Navbar","this","props","routes","map","routeAria","path","name","component","active","window","location","hash","slice","classNames","push","Link","to","className","join","key","replace","renderRouteButtons","Header","Header_Navbar","navRoutes","Footer","src","reactLogo","alt","renderReactLogo","ENV_ROUTES","exact","Routes","renderedRoutes","Route","Object","assign","HashRouter","basename","basedir","components_Header","components_Footer","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","rootDiv","document","getElementById","ReactDOM","render","components_App","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.27ae29bc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react_logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>Home</React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nclass About extends React.Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>About</React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Navbar extends React.Component {\r\n    renderRouteButtons() {\r\n        return this.props.routes.map(routeAria => {\r\n            const { path, component: { name }} = routeAria;\r\n            const currentPath = window.location.hash.slice(1);\r\n            const active = currentPath === path;\r\n            const classNames = ['nav-link'];\r\n            if (active) {\r\n                classNames.push('active');\r\n            }\r\n            return (\r\n                <Link to={path} className={classNames.join(' ')} key={path} replace={active}>{name}</Link>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className={'nav justify-content-end'}>\r\n                {this.renderRouteButtons()}\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nNavbar.propTypes = {\r\n    routes: PropTypes.arrayOf(PropTypes.shape({\r\n        path: PropTypes.string.isRequired,\r\n        component: PropTypes.func.isRequired\r\n    }))\r\n};\r\n\r\nexport default Navbar;\r\n","import Header from './Header';\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Navbar from './Navbar';\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <header className={'d-flex w-100 justify-content-center'}>\r\n                <div className={'navbar-brand'}>\r\n                    Header\r\n                </div>\r\n                <Navbar routes={this.props.navRoutes} />\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nHeader.propTypes = {\r\n    basedir: PropTypes.string.isRequired,\r\n    navRoutes: PropTypes.arrayOf(PropTypes.shape({\r\n        path: PropTypes.string.isRequired,\r\n        component: PropTypes.func.isRequired\r\n    }))\r\n};\r\n\r\nexport default Header;\r\n","import Footer from './Footer';\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport reactLogo from 'assets/react_logo.svg';\r\nimport 'styles/Footer.scss';\r\n\r\nclass Footer extends React.Component {\r\n    renderReactLogo() {\r\n        return (\r\n            <span className={'d-flex justify-content-center'}>\r\n                <h4 className={'footer-title'}>Made with React 16</h4>\r\n                <img src={reactLogo} className=\"react-logo\" alt=\"logo\" />\r\n            </span>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <footer className={'footer-container w-100'}>\r\n                {this.renderReactLogo()}\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Home from 'components/Home';\r\nimport About from 'components/About';\r\nimport Header from 'components/Header';\r\nimport Footer from 'components/Footer';\r\n\r\nconst ENV_ROUTES = {\r\n    production: '/website',\r\n    development: '/'\r\n};\r\n\r\nconst routes = [\r\n    {\r\n        path: '/',\r\n        component: Home,\r\n        exact: true\r\n    },\r\n    {\r\n        path: '/about',\r\n        component: About\r\n    }\r\n];\r\n\r\nfunction Routes(props) {\r\n    const renderedRoutes = routes.map(routeAria => (\r\n        <Route key={routeAria.path} {...routeAria} />\r\n    ));\r\n    return (\r\n        <Router basename={props.basedir}>\r\n            <React.Fragment>\r\n                <Header basedir={props.basedir} navRoutes={routes} />\r\n                <div className={'justify-content-center flex-grow-1'}>\r\n                    {renderedRoutes}\r\n                </div>\r\n                <Footer />\r\n            </React.Fragment>\r\n        </Router>\r\n    );\r\n}\r\n\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"App text-center h-100 d-flex flex-column flex-grow-1\">\r\n                <Routes basedir={ENV_ROUTES[process.env.NODE_ENV]} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/ServiceWorker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'styles/index.scss';\r\nimport App from 'components/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst rootDiv = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    rootDiv\r\n);\r\nregisterServiceWorker();\r\n\r\n// hot reloading\r\nif (process.env.NODE_ENV !== 'production' && module.hot) {\r\n  console.log('hot reloading active');\r\n  module.hot.accept('components/App', () => {\r\n    const NextApp = require('components/App').default\r\n    ReactDOM.render(\r\n      <NextApp />,\r\n      rootDiv\r\n    )\r\n  })\r\n}\r\n"],"sourceRoot":""}