{"version":3,"sources":["components/Home.js","components/About.js","components/Footer/index.js","components/Footer/Footer.js","components/App.js","registerServiceWorker.js","index.js"],"names":["Home","react_default","a","createElement","React","Component","About","Footer","className","ENV_ROUTES","Routes","props","HashRouter","basename","basedir","Route","exact","path","component","App","components_Footer","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","rootDiv","document","getElementById","ReactDOM","render","components_App","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"mSAUeA,gMANP,OACIC,EAAAC,EAAAC,cAAA,0BAHOC,IAAMC,YCQVC,mLANP,OACIL,EAAAC,EAAAC,cAAA,2BAHQC,IAAMC,WCAXE,0LCIP,OACIN,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,MAAIK,UAAW,gBAAf,+BALCJ,IAAMC,YCIrBI,EACQ,SAId,SAASC,EAAOC,GACd,OACEV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,SAAUF,EAAMG,SACtBb,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlB,IACjCC,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWZ,UAiBzBa,mLATX,OACElB,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAACO,EAAD,CAAQI,QAASL,IACjBR,EAAAC,EAAAC,cAACiB,EAAD,cALUhB,IAAMC,WCdlBgB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,KCzEjE,IAAMC,EAAUC,SAASC,eAAe,QAExCC,IAASC,OACL/C,EAAAC,EAAAC,cAAC8C,EAAD,MACAL,GDUW,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,SAAwB5B,OAAOC,UAC3C4B,SAAW7B,OAAOC,SAAS4B,OAIvC,OAGF7B,OAAO8B,iBAAiB,OAAQ,WAC9B,IAAMzB,EAAK,GAAA0B,OAAMH,SAAN,qBAEP9B,GAiDV,SAAiCO,GAE/B2B,MAAM3B,GACHI,KAAK,SAAAwB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C/B,UAAUC,cAAc+B,MAAM7B,KAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,KAAK,WAC7BT,OAAOC,SAASuC,aAKpBpC,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEArEAuB,CAAwBpC,GAIxBC,UAAUC,cAAc+B,MAAM7B,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MCpCxBqC","file":"static/js/main.f6f9f1cc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>Home</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nclass About extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>About</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;\r\n","import Footer from './Footer';\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\n//import reactLogo from 'assets/react_logo.svg';\r\nimport 'styles/Footer.css';\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <span>\r\n                    <h4 className={'inline-title'}>Made with React 16</h4>\r\n                    {\r\n                        //<img src={reactLogo} className=\"react-logo\" alt=\"logo\" />\r\n                    }\r\n                </span>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'styles/App.css';\r\nimport Home from 'components/Home';\r\nimport About from 'components/About';\r\nimport Footer from 'components/Footer';\r\n\r\nconst ENV_ROUTES = {\r\n  production: '/build',\r\n  development: '/'\r\n}\r\n\r\nfunction Routes(props) {\r\n  return (\r\n    <Router basename={props.basedir}>\r\n      <div>\r\n        <Route exact path='/' component={Home} />\r\n        <Route path='/about' component={About} />\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Routes basedir={ENV_ROUTES[process.env.NODE_ENV]} />\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/ServiceWorker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'styles/index.css';\r\nimport App from 'components/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nconst rootDiv = document.getElementById('root');\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    rootDiv\r\n);\r\nregisterServiceWorker();\r\n\r\n// hot reloading\r\nif (process.env.NODE_ENV !== 'production' && module.hot) {\r\n  console.log('hot reloading active');\r\n  module.hot.accept('components/App', () => {\r\n    const NextApp = require('components/App').default\r\n    ReactDOM.render(\r\n      <NextApp />,\r\n      rootDiv\r\n    )\r\n  })\r\n}\r\n"],"sourceRoot":""}