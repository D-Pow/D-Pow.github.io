{"version":3,"sources":["logo.svg","components/Home.js","components/About.js","components/App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","React","Component","About","Routes","props","HashRouter","basename","basedir","Route","exact","path","component","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","process","className","src","logo","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","rootDiv","document","getElementById","ReactDOM","render","components_App","URL","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wQCUzBC,0LANP,OACIC,EAAAC,EAAAC,cAAA,0BAHOC,IAAMC,YCQVC,mLANP,OACIL,EAAAC,EAAAC,cAAA,2BAHQC,IAAMC,WCK1B,SAASE,EAAOC,GACd,OACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAQC,SAAUF,EAAMG,SACtBV,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWf,IACjCC,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWT,UA4BzBU,cArBb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKT,QAAU,SACfa,QAAQC,IAAIC,qDAHAT,wEAMZ,OACEhB,EAAAC,EAAAC,cAAA,OAAKwB,UAAU,OACb1B,EAAAC,EAAAC,cAAA,UAAQwB,UAAU,cAChB1B,EAAAC,EAAAC,cAAA,OAAKyB,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC7B,EAAAC,EAAAC,cAAA,MAAIwB,UAAU,aAAd,qBAEF1B,EAAAC,EAAAC,cAAA,KAAGwB,UAAU,aAAb,wBACuB1B,EAAAC,EAAAC,cAAA,0BADvB,wBAGAF,EAAAC,EAAAC,cAACI,EAAD,CAAQI,QAASS,KAAKT,kBAhBZP,IAAMC,WCRlB0B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BzB,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrByB,MAAM,SAAAC,GACL3B,QAAQ2B,MAAM,4CAA6CA,KCzEjE,IAAMC,EAAUC,SAASC,eAAe,QAExCC,IAASC,OACLvD,EAAAC,EAAAC,cAACsD,EAAD,MACAL,GDUW,WACb,GAA6C,kBAAmBb,UAAW,CAGzE,GADkB,IAAImB,IAAIhC,SAAwBO,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,OAAQ,WAC9B,IAAMtB,EAAK,GAAAuB,OAAMnC,SAAN,qBAEPK,GAiDV,SAAiCO,GAE/BwB,MAAMxB,GACHI,KAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,KAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,KAAK,WAC7BT,OAAOC,SAASoC,aAKpBjC,EAAgBC,KAGnBY,MAAM,WACL1B,QAAQC,IACN,mEArEA8C,CAAwBjC,GAIxBC,UAAUC,cAAc4B,MAAM1B,KAAK,WACjClB,QAAQC,IACN,+GAMJY,EAAgBC,MCpCxBkC","file":"static/js/main.46f3531b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>Home</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nclass About extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>About</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport logo from 'logo.svg';\nimport 'styles/App.css';\nimport Home from 'components/Home';\nimport About from 'components/About';\n\nfunction Routes(props) {\n  return (\n    <Router basename={props.basedir}>\n      <div>\n        <Route exact path='/' component={Home} />\n        <Route path='/about' component={About} />\n      </div>\n    </Router>\n  );\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.basedir = '/build';\n    console.log(process.env);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Welcome to React</h1>\n        </header>\n        <p className=\"App-intro\">\n          To get started, edit <code>src/App.js</code> and save to reload.\n        </p>\n        <Routes basedir={this.basedir} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/ServiceWorker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'styles/index.css';\nimport App from 'components/App';\nimport registerServiceWorker from 'registerServiceWorker';\n\nconst rootDiv = document.getElementById('root');\n\nReactDOM.render(\n    <App />,\n    rootDiv\n);\nregisterServiceWorker();\n\n// hot reloading\nif (process.env.NODE_ENV !== 'production' && module.hot) {\n  console.log('hot reloading active');\n  module.hot.accept('components/App', () => {\n    const NextApp = require('components/App').default\n    ReactDOM.render(\n      <NextApp />,\n      rootDiv\n    )\n  })\n}\n"],"sourceRoot":""}