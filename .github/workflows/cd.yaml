# Using multiple workflow .yaml files
# https://stackoverflow.com/questions/64009546/how-to-run-multiple-github-actions-workflows-from-sub-directories


# TODO
# Preventing concurrent workflows (e.g. multiple merges to master at once)
# https://github.blog/changelog/2021-04-19-github-actions-limit-workflow-run-or-job-concurrency/
# From: https://github.community/t/how-to-limit-concurrent-workflow-runs/16844/
#
# Further split sub-directories' actions/workflows for more granular control.
#   - https://stackoverflow.com/questions/64009546/how-to-run-multiple-github-actions-workflows-from-sub-directories


# If we decide to use Docker - Using local Dockerfile in pipeline:
#   steps:
#   - name: Check out code
#     uses: actions/checkout@v2
#   - name: Build docker images
#     run: docker build -t local < .devcontainer/Dockerfile # .devcontainer is the local path
#   - name: Run tests
#     run: docker run -it -v $PWD:/srv -w/srv local make test
#  OR
#   - name: Build docker images
#     run: docker-compose build
#   - name: Run tests
#     run: docker-compose run test
# Ref: https://stackoverflow.com/questions/61154750/use-local-dockerfile-in-a-github-action


name: CD


on:
  workflow_dispatch:
  release:
    types: [ published ]
  workflow_run:
    workflows: [ 'CI' ]
    branches: [ master ]
    types: [ completed ]


defaults:
  run:
    shell: bash
    working-directory: ./


# Set GitHub user info for ease of use of Git CLI commands.
#
# See:
#   - https://docs.npmjs.com/cli/v9/commands/npm-run-script#ignore-scripts
#   - https://stackoverflow.com/questions/59471962/how-does-npm-behave-differently-with-ignore-scripts-set-to-true
#   - https://github.com/tschaub/gh-pages#optionsuser
#     - https://github.com/actions/checkout/issues/13
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  gitUserName: ${{ github.actor }}
  gitUserEmail: ${{ github.actor }}@users.noreply.github.com


jobs:
  # cd-init:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository branch
  #       uses: actions/checkout@v2
  #
  #     - name: CD Client build
  #       # Workflows require at least one job that has no dependencies.
  #       # However, we can still use the `uses` block for "reusable workflows"
  #       #
  #       # See:
  #       #   - Reusable workflows `uses`: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_iduses
  #       uses: ./.github/workflows/ci.yaml
  #
  # cd-init:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository branch
  #       uses: actions/checkout@v2
  #
  # cd-client-build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Client CD - Download CI output
  #       id: cd-download-artifacts
  #       needs: [ cd-init ]
  #     # Workflows require at least one job that has no dependencies.
  #     # However, we can still use the `uses` block for "reusable workflows"
  #     #
  #     # See:
  #     #   - Reusable workflows `uses`: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_iduses
  #       #  uses: ./.github/workflows/ci.yaml
  #       #  uses: actions/download-artifact@v3
  #       with:
  #         name: ci-build-output
  #         path: |
  #           dist

  cd-build:
    runs-on: ubuntu-latest
    # Only run on merge to master: https://github.community/t/depend-on-another-workflow/16311/3
    if: ${{ github.event.pull_request.merged || github.ref == 'refs/heads/master' }}
    # Grant the permissions required for deployments to GitHub Pages.
    #
    # See:
    #   - https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
    permissions:
      pages: write      # Grant write permissions to deploy to the `gh-pages` (or whatever is specified in "Settings") branch
      id-token: write   # to verify the deployment originates from an appropriate source
      deployments: write
      packages: write
      actions: write
      contents: write
    steps:
      - name: Checkout repository branch
        uses: actions/checkout@v2

      - name: Set NodeJS version
        uses: actions/setup-node@v2
        with:
          node-version: 16

      # Native GitHub `actions/download-artifact@v3` doesn't allow sharing between workflows.
      #   - Issue: https://github.com/actions/toolkit/issues/501
      # Once it does, we can use:
      #
      # - name: Client CD - Download CI output
      #   id: cd-download-artifacts
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: ci-build-output
      #     path: |
      #       dist
      #
      # Note that simply adding a `needs`/`uses` block for my-workflow.yaml file doesn't suffice until this is fixed;
      # adding said block for my-action.yaml would (since it's an action and actions are reusable while workflows aren't
      # despite what GitHub claims) but only if that action covers all your needs.
      #
      # We can work around this via:
      #
      # 1.
      # Use a third-party download-artifact action.
      #   - Good example: https://stackoverflow.com/questions/60355925/share-artifacts-between-workflows-github-actions/65049722#65049722
      #
      # - name: Client CD - Download CI output
      #   id: cd-download-artifacts
      #   # needs: [ ci-build-output ]
      #   # needs: [ ci-build-and-upload-artifacts ]
      #   uses: dawidd6/action-download-artifact@v2
      #   with:
      #     name: ci-build-output-artifacts
      #     branch: master
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     if_no_artifact_found: fail
      #     workflow_conclusion: success
      #
      # 2. Use our own custom CLI action to manually download the artifact files.
      #    This is the only reliable option at the moment for sharing artifacts between workflow files
      #    without uploading them in Release files.
      #    Do so via:
      #     - Get latest CI workflow ID via:
      #       gh run list --limit 1 --workflow CI | tail -n +1 | awk '{ print $(NF - 2) }'
      #     - Download all files from that workflow into an arbitrary dir (`ci-workflow-artifact-output` in this case).
      #     - Create the dir we actually want to use (`dist` in this case).
      #     - Copy all nested files/directories from the downloaded dir to the desired dir.
      #     - Delete the original temp dir.
      #    Notes:
      #     - `github.run_id` == Current workflow run ID, not the ID of the run we want (previous workflow run).
      #     - GitHub CLI docs: https://cli.github.com/manual/gh_help_reference
      #     - GitHub workflows - Storing artifacts: https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
      #     - GitHub workflows - Using `gh` CLI: https://docs.github.com/en/actions/using-workflows/using-github-cli-in-workflows
      #     - GitHub workflows - `github` context vars available: https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
      #
      # TODO: Try the cache instead of storing artifacts manually:
      #   - Related - Cache: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
      # - name: Client CD - Download CI artifacts
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     WORKFLOW_RUN_ID: ${{ github.run_id }}
      #   run: |
      #     gh run download --dir ci-workflow-artifact-output --pattern '*' $(gh run list --limit 1 --workflow CI | tail -n +1 | awk '{ print $(NF - 2) }')
      #     mkdir dist
      #     cp -R ci-workflow-artifact-output/*/* dist
      #     rm -rf ci-workflow-artifact-output
      #
      # # Only necessary if running npm scripts in CD, which we are for `deploy`
      # - name: Client CD - Install
      #   id: cd-client-install
      #   shell: bash
      #   working-directory: ./
      #   run: |
      #     npm install

      - name: Client CD Build - Download CI cache
        uses: actions/cache/restore@v3
        env:
          cache-name: ci-cache
        with:
          path: |
            node_modules
            dist
          # ( declare origIFS="$IFS"; declare IFS=$'\n'; declare fileHashes=(); for file in $(find src/ -type f); do fileHashes+=("$(sha256sum "$file")"); done; declare fileHashesStr="$(printf "%s\n" "${_fileHashes[@]}")"; fileHashesStr="${fileHashesStr/%\n}"; declare fileHashesSortedByFilename="$(echo "$fileHashesStr" | sort -V -k 2)"; declare dirHash="$(echo -n "$fileHashesSortedByFilename" | sha256sum | awk '{ print $1 }')"; echo "$dirHash"; )
          key: ${{ env.cache-name }}-${{ runner.os }}-${{ hashFiles('./+(src|test|tests|config|mocks)/**') }}
        continue-on-error: false

      # See:
      #   - Cache GitHub Workflow action docs: https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#example-using-the-cache-action
      #   - Cache-restore between workflows: https://github.com/actions/cache#example-cache-workflow
      # Only run next step if cache-hit failed
      # - if: ${{ steps.ci-cache.outputs.cache-hit != 'true' }}
      - if: ${{ failure() }}
        # continue-on-error: false
        name: Client CD - Generate CI artifacts
        run: |
          echo ${{ steps.ci-cache.outputs.cache-hit }}
          git pull
          npm install
          npm run build


  cd-deploy:
    runs-on: ubuntu-latest
    needs: [ cd-build ]
    permissions:
      pages: write      # Grant write permissions to deploy to the `gh-pages` (or whatever is specified in "Settings") branch
      id-token: write   # to verify the deployment originates from an appropriate source
      deployments: write
      packages: write
      actions: write
      contents: write
    steps:
      - name: Checkout repository branch
        uses: actions/checkout@v2

      - name: Set NodeJS version
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Client CD Deploy - Download CI cache
        uses: actions/cache/restore@v3
        env:
          cache-name: ci-cache
        with:
          path: |
            node_modules
            dist
          # ( declare origIFS="$IFS"; declare IFS=$'\n'; declare fileHashes=(); for file in $(find src/ -type f); do fileHashes+=("$(sha256sum "$file")"); done; declare fileHashesStr="$(printf "%s\n" "${_fileHashes[@]}")"; fileHashesStr="${fileHashesStr/%\n}"; declare fileHashesSortedByFilename="$(echo "$fileHashesStr" | sort -V -k 2)"; declare dirHash="$(echo -n "$fileHashesSortedByFilename" | sha256sum | awk '{ print $1 }')"; echo "$dirHash"; )
          key: ${{ env.cache-name }}-${{ runner.os }}-${{ hashFiles('./+(src|test|tests|config|mocks)/**') }}
        continue-on-error: false

      - name: Client CD - Increment version
        id: cd-client-version-bump
        # Not required since `npm version` already makes a commit for us, but for reference:
        #   git commit -am "Patch to v$(jq -r '.version' package.json)"
        run: |
          git pull
          git config --global user.name ${{ env.gitUserName }}
          git config --global user.email ${{ env.gitUserEmail }}
          npm version patch
          git push
          npm run build

      # Ignore pre-/post- npm scripts via `npm run --ignore-scripts <my-script>`.
      # This could be useful for, e.g. scripts like `deploy` since `predeploy` (`npm run build`)
      # was already run in CI.
      #
      # Set `user.name` and `user.email` for ~/.gitconfig inline via the `--user` flag for `gh-pages`:
      #   npm run --ignore-scripts deploy -- --user "${{ env.gitUserName }} <${{ env.gitUserEmail }}>"
      - name: CD - Deploy application
        # run: |
        #   git config --list
        #   git config --global user.name ${{ env.gitUserName }}
        #   git config --global user.email ${{ env.gitUserEmail }}
        #   git remote -v
        #   git branch --show-current
        #   git config --unset http.https://github.com/.extraheader
        #   npm run --ignore-scripts deploy
        # ls --ignore=dist --ignore=.git
          # git checkout gh-pages
          # ( for path in $(ls --ignore=dist --ignore=.git); do rm -rf "$path"; done; )
          # cp -R dist/* .
          # rm -rf dist
          # ls -FlAh
          # ls -FlAh dist || exit 0
          # jq -r '.version' package.json
          # npm run --ignore-scripts deploy -- --user "${{ env.gitUserName }} <${{ env.gitUserEmail }}>"
        # We need to re-run `npm run build` since the version was incremented in the previous step
        run: |
          git pull
          git checkout gh-pages
          ( for path in $(ls --ignore=dist --ignore=.git --ignore=package.json); do rm -rf "$path"; done; )
          cp -R dist/* .
          ( for path in dist/*; do git add "$(echo "$path" | sed -E 's/dist/./')"; done; )
          rm -rf dist
          git commit -am "Patch to v$(jq -r '.version' package.json)"
          git push
